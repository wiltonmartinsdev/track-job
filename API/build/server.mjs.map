{"version":3,"sources":["../src/server.ts","../src/middlewares/error-handling.ts","../src/utils/AppError.ts","../src/routes/index.ts","../src/routes/job-routes.ts","../src/controllers/job-controller.ts","../src/database/knex.ts","../knexfile.ts"],"sourcesContent":["import dotenv from \"dotenv\";\nimport express from \"express\";\n\nimport errorHandling from \"./middlewares/error-handling\";\nimport { routes } from \"./routes\";\n\ndotenv.config();\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.use(express.json());\napp.use(routes);\napp.use(errorHandling);\n\napp.listen(PORT, () => {\n\tconsole.log(`Server is running on port ${PORT}!`);\n});\n","import { Request, Response, NextFunction } from \"express\";\nimport { ZodError } from \"zod\";\n\nimport AppError from \"../utils/AppError\";\n\nexport default function errorHandling(\n\terror: any,\n\trequest: Request,\n\tresponse: Response,\n\t_: NextFunction\n) {\n\tif (error instanceof AppError) {\n\t\tresponse.status(error.statusCode).json({ message: error.message });\n\t} else if (error instanceof ZodError) {\n\t\tresponse\n\t\t\t.status(400)\n\t\t\t.json({ message: \"Validation error\", issues: error.format() });\n\t} else {\n\t\tresponse.status(500).json({ message: error.message });\n\t}\n}\n","export default class AppError {\n    message: string;\n    statusCode: number;     \n    constructor(message: string, statusCode = 400) {\n        this.message = message;\n        this.statusCode = statusCode;\n        \n    }\n}","import { Router } from \"express\";\n\nimport { jobRoutes } from \"./job-routes\";\n\nexport const routes = Router();\n\nroutes.use(\"/\", jobRoutes);\n","import { Router } from \"express\";\n\nimport JobController from \"../controllers/job-controller\";\n\nexport const jobRoutes = Router();\nconst jobController = new JobController();\n\njobRoutes.get(\"/\", jobController.index);\njobRoutes.post(\"/\", jobController.create);\njobRoutes.put(\"/:id\", jobController.update);\njobRoutes.delete(\"/:id\", jobController.delete);\n","import { NextFunction, Request, Response } from \"express\";\nimport z from \"zod\";\n\nimport { knex } from \"../database/knex\";\nimport AppError from \"../utils/AppError\";\n\nexport default class JobController {\n\tasync index(request: Request, response: Response, next: NextFunction) {\n\t\ttry {\n\t\t\tconst { company_name } = request.query;\n\t\t\tconst jobs = await knex<jobRepository>(\"jobs\")\n\t\t\t\t.select()\n\t\t\t\t.whereLike(\"company_name\", `%${company_name ?? \"\"}%`)\n\t\t\t\t.orderBy(\"created_at\", \"desc\");\n\n\t\t\tresponse.json(jobs);\n\t\t} catch (error) {\n\t\t\tnext(error);\n\t\t}\n\t}\n\n\tasync create(request: Request, response: Response, next: NextFunction) {\n\t\ttry {\n\t\t\tconst bodySchema = z.object({\n\t\t\t\tcompany_name: z.string().trim().min(4),\n\t\t\t\tposition: z.string().trim().min(13),\n\t\t\t\tseniority_level: z.string().trim().min(5),\n\t\t\t\tvacancy_modality: z.string().trim().min(6),\n\t\t\t\twork_regime: z.string().trim().min(2),\n\t\t\t\tplace: z.string().trim().min(4),\n\t\t\t\tstatus: z.string().trim().min(7),\n\t\t\t});\n\n\t\t\tconst {\n\t\t\t\tcompany_name,\n\t\t\t\tposition,\n\t\t\t\tseniority_level,\n\t\t\t\tvacancy_modality,\n\t\t\t\twork_regime,\n\t\t\t\tplace,\n\t\t\t\tstatus,\n\t\t\t} = bodySchema.parse(request.body);\n\n\t\t\tawait knex<jobRepository>(\"jobs\").insert({\n\t\t\t\tcompany_name,\n\t\t\t\tposition,\n\t\t\t\tseniority_level,\n\t\t\t\tvacancy_modality,\n\t\t\t\twork_regime,\n\t\t\t\tplace,\n\t\t\t\tstatus,\n\t\t\t});\n\n\t\t\tresponse.status(201).json({\n\t\t\t\tmessage: \"Job created successfully\",\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tnext(error);\n\t\t}\n\t}\n\n\tasync update(request: Request, response: Response, next: NextFunction) {\n\t\ttry {\n\t\t\tconst id = z\n\t\t\t\t.string()\n\t\t\t\t.transform((value) => Number(value))\n\t\t\t\t.refine((value) => !isNaN(value), {\n\t\t\t\t\tmessage: \"Id must be a number\",\n\t\t\t\t})\n\t\t\t\t.parse(request.params.id);\n\n\t\t\tconst {\n\t\t\t\tcompany_name,\n\t\t\t\tposition,\n\t\t\t\tseniority_level,\n\t\t\t\tvacancy_modality,\n\t\t\t\twork_regime,\n\t\t\t\tplace,\n\t\t\t\tstatus,\n\t\t\t} = z\n\t\t\t\t.object({\n\t\t\t\t\tcompany_name: z.string().trim().min(4),\n\t\t\t\t\tposition: z.string().trim().min(13),\n\t\t\t\t\tseniority_level: z.string().trim().min(5),\n\t\t\t\t\tvacancy_modality: z.string().trim().min(6),\n\t\t\t\t\twork_regime: z.string().trim().min(2),\n\t\t\t\t\tplace: z.string().trim().min(4),\n\t\t\t\t\tstatus: z.string().trim().min(7),\n\t\t\t\t})\n\t\t\t\t.parse(request.body);\n\n\t\t\tconst job = await knex<jobRepository>(\"jobs\")\n\t\t\t\t.select()\n\t\t\t\t.where({ id })\n\t\t\t\t.first();\n\n\t\t\tif (!job) {\n\t\t\t\tthrow new AppError(\"Job not found\", 404);\n\t\t\t}\n\n\t\t\tawait knex<jobRepository>(\"jobs\")\n\t\t\t\t.update({\n\t\t\t\t\tcompany_name,\n\t\t\t\t\tposition,\n\t\t\t\t\tseniority_level,\n\t\t\t\t\tvacancy_modality,\n\t\t\t\t\twork_regime,\n\t\t\t\t\tplace,\n\t\t\t\t\tstatus,\n\t\t\t\t\tupdated_at: knex.fn.now(),\n\t\t\t\t})\n\t\t\t\t.where({ id });\n\n\t\t\tresponse.json({ message: \"Job updated successfully\" });\n\t\t} catch (error) {\n\t\t\tnext(error);\n\t\t}\n\t}\n\n\tasync delete(request: Request, response: Response, next: NextFunction) {\n\t\ttry {\n\t\t\tconst id = z\n\t\t\t\t.string()\n\t\t\t\t.transform((value) => Number(value))\n\t\t\t\t.refine((value) => !isNaN(value), {\n\t\t\t\t\tmessage: \"Id must be a number\",\n\t\t\t\t})\n\t\t\t\t.parse(request.params.id);\n\n\t\t\tconst job = await knex<jobRepository>(\"jobs\")\n\t\t\t\t.select()\n\t\t\t\t.where({ id })\n\t\t\t\t.first();\n\n\t\t\tif (!job) {\n\t\t\t\tthrow new AppError(\"Job not found\", 404);\n\t\t\t}\n\n\t\t\tawait knex<jobRepository>(\"jobs\").delete().where({ id });\n\n\t\t\tresponse.json({ message: \"Job deleted successfully\" });\n\t\t} catch (error) {\n\t\t\tnext(error);\n\t\t}\n\t}\n}\n","import { knex as knexConfig } from \"knex\";\n\nimport config from \"../../knexfile\";\n\nexport const knex = knexConfig(config);\n","export default {\n    client: 'sqlite3',\n    connection: {\n        filename: \"./src/database/database.db\"\n    },\n    useNullAsDefault: true,\n\n    migrations: {\n        extension: 'ts',\n        directory: './src/database/migrations'\n    }\n}"],"mappings":"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","names":["Router","Router"]}